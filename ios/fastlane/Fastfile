# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

xcversion(version: "~> 12.4")

platform :ios do

  desc "Update app version number and build number based on branch name following semantic versioning (falls back to highest of latest testflight vs xcode project version)"
  lane :update_app_version_numbers do
    
    version_string = ENV["FORCED_VERSION_NUMBER_STRING"]
    
    if version_string != nil && version_string.length > 0
      puts "using forced version \"#{version_string}\""
    else
      # official semver regex from https://semver.org/, slightly modified for branch names
      SEMVER_REGEX = /^(?:.+?\/)?v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      
      branch = git_branch
      puts "branch=#{branch}"

      if m = branch.match(SEMVER_REGEX)
        version_string = m.captures[0, 3].join(".")
        puts "extracted semantic version number from branch name \"#{branch}\" = #{m.captures.join(" ")}"
      else
        # UI.user_error!("unable to determine semantic version from branch name \"#{branch}\"")
        puts "unable to determine semantic version from branch name \"#{branch}\""
        
        app_store_build_number(live: false)
        latest_app_store_version = lane_context[SharedValues::LATEST_VERSION]
        xcode_project_version = get_version_number

        # use largest version (note ascii comparison - not sure if accurate enough)
        version_string = latest_app_store_version > xcode_project_version ? latest_app_store_version : xcode_project_version
        puts "using version #{version_string} (latest app store = #{latest_app_store_version}, project version = #{xcode_project_version})"
      end
    end

    # increment build number
    current_build_number = latest_testflight_build_number(version: version_string)
    build_number = current_build_number + 1
    increment_build_number(build_number: build_number)

    # set version number
    current_version_string = get_version_number
    increment_version_number(version_number: version_string)


    puts "build_number #{current_build_number} => #{build_number}"
    puts "version_number #{current_version_string} => #{version_string}"
  end


  desc "Build the app with correct distribution signing"
  lane :build do
    
    # fetch the latest certificates and provisioning profile
    # todo: use match to automatically sync certs and profiles
    get_certificates(generate_apple_certs: false)
    get_provisioning_profile

    # set version number and build number
    update_app_version_numbers

    # set xcode project to use the correct certificate and profile
    update_code_signing_settings(
      use_automatic_signing: false,
      code_sign_identity: "iPhone Distribution",
      profile_name: lane_context[SharedValues::SIGH_NAME]
    )
    
    # install pods
    cocoapods

    # check for pod cache (derived data)
    scheme = ENV["GYM_SCHEME"]
    build_configuration = "Release"

    Dir.chdir("..") do
      
      ios_derived_data_path = File.expand_path(".local_derived_data")
      cache_dir = File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/#{build_configuration}-iphoneos")

      puts "derived data dir = #{ios_derived_data_path}"
      puts "cache dir = #{cache_dir}"

      if(File.exist?(cache_dir))

        # build with pod cache
        puts "using cached derived data"

        fastlane_require 'xcodeproj'
        project = Xcodeproj::Project.open(ENV["MAIN_PROJECT"])
        target = project.targets.select { |target| target.name == scheme }.first
        phase = target.shell_script_build_phases.select { |phase| phase.name && phase.name.include?('Copy Pods Resources') }.first
        if (!phase.shell_script.start_with?('BUILT_PRODUCTS_DIR'))
          phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_dir} #{phase.shell_script}"
          project.save()
        end

        gym(
          silent: false,
          suppress_xcode_output: true,
          include_symbols: true,
          include_bitcode: true,
          project: "ios/#{ENV["MAIN_PROJECT"]}",
          scheme: scheme,
          buildlog_path: "ios/.build_logs",
          configuration: build_configuration,
          output_directory: "ios",
          xcargs: [
              "PODS_CONFIGURATION_BUILD_DIR=#{cache_dir}",
              "FRAMEWORK_SEARCH_PATHS='#{cache_dir} $(inherited)'",
              "LIBRARY_SEARCH_PATHS='#{cache_dir} $(inherited)'",
              "SWIFT_INCLUDE_PATHS=#{cache_dir}"
          ].join(" ")
        )

      else
        
        # full build
        puts "performing full build (no derived data cache)"

        build_app(
          silent: false,
          suppress_xcode_output: true,
          include_symbols: true,
          include_bitcode: true,
          buildlog_path: "ios/.build_logs",
          workspace: "ios/#{ENV["MAIN_WORKSPACE"]}",
          derived_data_path: ios_derived_data_path,
          configuration: build_configuration,
          output_directory: "ios",
        )

        # remove misc artifacts to reduce cache size
        require 'fileutils'
        dirs = [
          File.expand_path("#{ios_derived_data_path}/info.plist"),
          File.expand_path("#{ios_derived_data_path}/Logs"),
          File.expand_path("#{ios_derived_data_path}/SourcePackages"),
          File.expand_path("#{ios_derived_data_path}/ModuleCache.noindex"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/IntermediateBuildFilesPath/#{scheme}.build"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/IntermediateBuildFilesPath/XCBuildData"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/SwiftSupport"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/PrecompiledHeaders")
        ]
        dirs.each { |dir| FileUtils.rm_rf(dir) }
      end
    end
  end


  desc "Push a new beta build to TestFlight"
  lane :beta do

    # run the build lane
    build

    changelog = get_changelog()
      
    puts "changelog=#{changelog}"

    # upload
    upload_to_testflight(
      skip_submission: true,
      notify_external_testers: false,
      changelog: changelog,

      # note: skipping this sacrifices some flexibility in post-processing but reduces CI minutes and costs significantly
      skip_waiting_for_build_processing: true
    )

  end


  desc "print the changelog"
  lane :print_changelog do

    puts "changelog:\n#{get_changelog()}"

  end


  def get_changelog()
    
    Dir.chdir("..") do

      branch_name = git_branch
      commit = last_git_commit
      changelog_msg = "(automatically built from #{commit[:abbreviated_commit_hash]} on #{branch_name})"

      return changelog_msg

    end

  end

end
