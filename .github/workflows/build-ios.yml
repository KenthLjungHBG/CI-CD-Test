# This is a basic workflow to help you get started with Actions

name: Build (iOS)

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and upload production ipa to TestFlight
    environment: production

    # The type of runner that the job will run on
    runs-on: macos-latest

    env:
      CERT_KEYCHAIN_PASSWORD: ${{ secrets.CERT_KEYCHAIN_PASSWORD }}
      NODE_ENV: production

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: cache yarn
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: cache cocoapods
        uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: yarn install
        run: yarn install

      - name: Install cert and profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # create variables
          CERT_PATH=build_certificate.p12
          CERT_KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERT_PATH

          # create temporary keychain
          security create-keychain -p $CERT_KEYCHAIN_PASSWORD $CERT_KEYCHAIN_PATH
          security set-keychain-settings -lut 1200 $CERT_KEYCHAIN_PATH
          security unlock-keychain -p $CERT_KEYCHAIN_PASSWORD $CERT_KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERT_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $CERT_KEYCHAIN_PATH
          security list-keychain -d user -s $CERT_KEYCHAIN_PATH

      - name: echo checks
        run: |
          ls -lah . ios/ node_modules/react-native/scripts/
          ls -lah /Users/runner/work/CI-CD-Test/CI-CD-Test/node_modules/react-native/scripts/

      - name: Build
        timeout-minutes: 40
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          PILOT_APPLE_ID: ${{ secrets.PILOT_APPLE_ID }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          FASTLANE_SKIP_UPDATE_CHECK: 1
        run: |
          export CERT_KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          cd ios
          fastlane build --verbose

      - name: Clean up cert
        if: ${{ always() }}
        run:  |
          CERT_KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security delete-keychain $CERT_KEYCHAIN_PATH
